
> node-sequelize-rest-api@0.0.0 start /var/www/api/node-sequelize-rest-api
> nodemon ./bin/www

[33m[nodemon] 2.0.3[39m
[33m[nodemon] to restart at any time, enter `rs`[39m
[33m[nodemon] watching path(s): *.*[39m
[33m[nodemon] watching extensions: js,mjs,json[39m
[32m[nodemon] starting `node ./bin/www`[39m
---------------------------
{ Planet: Planet,
  Universal: Universal,
  User: User,
  Tsa_aeronaves: Tsa_aeronaves,
  sequelize: 
   Sequelize {
     options: 
      { dialect: 'postgres',
        dialectModulePath: null,
        host: 'localhost',
        protocol: 'tcp',
        define: {},
        query: {},
        sync: {},
        timezone: '+00:00',
        standardConformingStrings: true,
        logging: [Function: bound consoleCall],
        omitNull: false,
        native: false,
        replication: false,
        ssl: undefined,
        pool: [Object],
        quoteIdentifiers: true,
        hooks: {},
        retry: [Object],
        transactionType: 'DEFERRED',
        isolationLevel: null,
        databaseVersion: 0,
        typeValidation: false,
        benchmark: false,
        operatorsAliases: false },
     config: 
      { database: 'test',
        username: 'postgres',
        password: 'Xdslxdsl88998899',
        host: 'localhost',
        port: 5432,
        pool: [Object],
        protocol: 'tcp',
        native: false,
        ssl: undefined,
        replication: false,
        dialectModulePath: null,
        keepDefaultTimezone: undefined,
        dialectOptions: undefined },
     dialect: 
      PostgresDialect {
        sequelize: [Circular],
        connectionManager: [Object],
        QueryGenerator: [Object] },
     queryInterface: QueryInterface { sequelize: [Circular], QueryGenerator: [Object] },
     models: 
      { Planet: Planet,
        Universal: Universal,
        User: User,
        Tsa_aeronaves: Tsa_aeronaves },
     modelManager: ModelManager { models: [Array], sequelize: [Circular] },
     connectionManager: 
      ConnectionManager {
        sequelize: [Circular],
        config: [Object],
        dialect: [Object],
        versionPromise: null,
        dialectName: 'postgres',
        pool: [Object],
        lib: [Object],
        oidMap: [Object],
        arrayOidMap: [Object] },
     importCache: 
      { '/var/www/api/node-sequelize-rest-api/models/planet.js': Planet,
        '/var/www/api/node-sequelize-rest-api/models/universal.js': Universal,
        '/var/www/api/node-sequelize-rest-api/models/user.js': User,
        '/var/www/api/node-sequelize-rest-api/models/tsa/tsa_aeronaves.js': Tsa_aeronaves },
     test: 
      { _trackRunningQueries: false,
        _runningQueries: 0,
        trackRunningQueries: [Function: trackRunningQueries],
        verifyNoRunningQueries: [Function: verifyNoRunningQueries] } },
  Sequelize: 
   { [Function: Sequelize]
     asIs: [Function: literal],
     condition: [Function],
     version: '4.44.4',
     options: { hooks: {} },
     Utils: 
      { Promise: [Object],
        debug: [Function: bound debug],
        deprecate: [Function: bound deprecate],
        warn: [Function: bound warn],
        getLogger: [Function],
        useInflection: [Function: useInflection],
        camelizeIf: [Function: camelizeIf],
        underscoredIf: [Function: underscoredIf],
        isPrimitive: [Function: isPrimitive],
        mergeDefaults: [Function: mergeDefaults],
        merge: [Function: merge],
        lowercaseFirst: [Function: lowercaseFirst],
        uppercaseFirst: [Function: uppercaseFirst],
        spliceStr: [Function: spliceStr],
        camelize: [Function: camelize],
        underscore: [Function: underscore],
        format: [Function: format],
        formatNamedParameters: [Function: formatNamedParameters],
        cloneDeep: [Function: cloneDeep],
        mapFinderOptions: [Function: mapFinderOptions],
        mapOptionFieldNames: [Function: mapOptionFieldNames],
        mapWhereFieldNames: [Function: mapWhereFieldNames],
        mapValueFieldNames: [Function: mapValueFieldNames],
        isColString: [Function: isColString],
        argsArePrimaryKeys: [Function: argsArePrimaryKeys],
        canTreatArrayAsAnd: [Function: canTreatArrayAsAnd],
        combineTableNames: [Function: combineTableNames],
        singularize: [Function: singularize],
        pluralize: [Function: pluralize],
        removeCommentsFromFunctionString: [Function: removeCommentsFromFunctionString],
        toDefaultValue: [Function: toDefaultValue],
        defaultValueSchemable: [Function: defaultValueSchemable],
        removeNullValuesFromHash: [Function: removeNullValuesFromHash],
        stack: [Function: stack],
        sliceArgs: [Function: sliceArgs],
        now: [Function: now],
        TICK_CHAR: '`',
        addTicks: [Function: addTicks],
        removeTicks: [Function: removeTicks],
        flattenObjectDeep: [Function: flattenObjectDeep],
        SequelizeMethod: [Function: SequelizeMethod],
        Fn: [Function: Fn],
        Col: [Function: Col],
        Cast: [Function: Cast],
        Literal: [Function: Literal],
        Json: [Function: Json],
        Where: [Function: Where],
        validateParameter: [Object],
        mapIsolationLevelStringToTedious: [Function],
        getOperators: [Function: getOperators],
        getComplexKeys: [Function: getComplexKeys],
        getComplexSize: [Function: getComplexSize],
        isWhereEmpty: [Function: isWhereEmpty],
        generateEnumName: [Function: generateEnumName],
        camelizeObjectKeys: [Function: camelizeObjectKeys],
        defaults: [Function: defaults] },
     Promise: 
      { [Function: Promise]
        TypeError: [Function: TypeError],
        RangeError: [Function: RangeError],
        CancellationError: [Function: SubError],
        TimeoutError: [Function: SubError],
        OperationalError: [Function: OperationalError],
        RejectionError: [Function: OperationalError],
        AggregateError: [Function: SubError],
        _peekContext: [Function],
        onPossiblyUnhandledRejection: [Function],
        onUnhandledRejectionHandled: [Function],
        longStackTraces: [Function],
        hasLongStackTraces: [Function],
        config: [Function],
        getNewLibraryCopy: [Function],
        is: [Function],
        fromCallback: [Function],
        fromNode: [Function],
        all: [Function],
        cast: [Function],
        fulfilled: [Function],
        resolve: [Function],
        rejected: [Function],
        reject: [Function],
        setScheduler: [Function],
        pending: [Function],
        defer: [Function],
        method: [Function],
        try: [Function],
        attempt: [Function],
        bind: [Function],
        PromiseInspection: [Function: PromiseInspection],
        join: [Function],
        Promise: [Circular],
        version: '3.7.2',
        coroutine: [Object],
        spawn: [Function],
        map: [Function],
        promisify: [Function],
        promisifyAll: [Function],
        props: [Function],
        race: [Function],
        reduce: [Function],
        settle: [Function],
        allSettled: [Function],
        some: [Function],
        _SomePromiseArray: [Function: SomePromiseArray],
        delay: [Function],
        using: [Function],
        any: [Function],
        each: [Function],
        mapSeries: [Function: PromiseMapSeries],
        filter: [Function],
        default: [Circular] },
     QueryTypes: 
      { SELECT: 'SELECT',
        INSERT: 'INSERT',
        UPDATE: 'UPDATE',
        BULKUPDATE: 'BULKUPDATE',
        BULKDELETE: 'BULKDELETE',
        DELETE: 'DELETE',
        UPSERT: 'UPSERT',
        VERSION: 'VERSION',
        SHOWTABLES: 'SHOWTABLES',
        SHOWINDEXES: 'SHOWINDEXES',
        DESCRIBE: 'DESCRIBE',
        RAW: 'RAW',
        FOREIGNKEYS: 'FOREIGNKEYS',
        SHOWCONSTRAINTS: 'SHOWCONSTRAINTS' },
     TableHints: 
      { NOLOCK: 'NOLOCK',
        READUNCOMMITTED: 'READUNCOMMITTED',
        UPDLOCK: 'UPDLOCK',
        REPEATABLEREAD: 'REPEATABLEREAD',
        SERIALIZABLE: 'SERIALIZABLE',
        READCOMMITTED: 'READCOMMITTED',
        TABLOCK: 'TABLOCK',
        TABLOCKX: 'TABLOCKX',
        PAGLOCK: 'PAGLOCK',
        ROWLOCK: 'ROWLOCK',
        NOWAIT: 'NOWAIT',
        READPAST: 'READPAST',
        XLOCK: 'XLOCK',
        SNAPSHOT: 'SNAPSHOT',
        NOEXPAND: 'NOEXPAND' },
     Op: 
      { eq: Symbol(eq),
        ne: Symbol(ne),
        gte: Symbol(gte),
        gt: Symbol(gt),
        lte: Symbol(lte),
        lt: Symbol(lt),
        not: Symbol(not),
        is: Symbol(is),
        in: Symbol(in),
        notIn: Symbol(notIn),
        like: Symbol(like),
        notLike: Symbol(notLike),
        iLike: Symbol(iLike),
        notILike: Symbol(notILike),
        regexp: Symbol(regexp),
        notRegexp: Symbol(notRegexp),
        iRegexp: Symbol(iRegexp),
        notIRegexp: Symbol(notIRegexp),
        between: Symbol(between),
        notBetween: Symbol(notBetween),
        overlap: Symbol(overlap),
        contains: Symbol(contains),
        contained: Symbol(contained),
        adjacent: Symbol(adjacent),
        strictLeft: Symbol(strictLeft),
        strictRight: Symbol(strictRight),
        noExtendRight: Symbol(noExtendRight),
        noExtendLeft: Symbol(noExtendLeft),
        and: Symbol(and),
        or: Symbol(or),
        any: Symbol(any),
        all: Symbol(all),
        values: Symbol(values),
        col: Symbol(col),
        placeholder: Symbol(placeholder),
        join: Symbol(join),
        raw: Symbol(raw),
        Aliases: [Object],
        LegacyAliases: [Object] },
     Validator: 
      { version: '10.11.0',
        toDate: [Object],
        toFloat: [Object],
        toInt: [Object],
        toBoolean: [Object],
        equals: [Object],
        contains: [Function: contains],
        matches: [Object],
        isEmail: [Object],
        isURL: [Object],
        isMACAddress: [Object],
        isIP: [Object],
        isIPRange: [Object],
        isFQDN: [Object],
        isBoolean: [Object],
        isAlpha: [Function: isAlpha],
        isAlphaLocales: [Array],
        isAlphanumeric: [Function: isAlphanumeric],
        isAlphanumericLocales: [Array],
        isNumeric: [Object],
        isPort: [Object],
        isLowercase: [Object],
        isUppercase: [Object],
        isAscii: [Object],
        isFullWidth: [Function: isFullWidth],
        isHalfWidth: [Function: isHalfWidth],
        isVariableWidth: [Object],
        isMultibyte: [Object],
        isSurrogatePair: [Object],
        isInt: [Object],
        isFloat: [Function: isFloat],
        isFloatLocales: [Array],
        isDecimal: [Function: isDecimal],
        isHexadecimal: [Object],
        isDivisibleBy: [Object],
        isHexColor: [Object],
        isISRC: [Object],
        isMD5: [Object],
        isHash: [Object],
        isJWT: [Object],
        isJSON: [Object],
        isEmpty: [Object],
        isLength: [Object],
        isByteLength: [Object],
        isUUID: [Object],
        isMongoId: [Object],
        isAfter: [Object],
        isBefore: [Object],
        isIn: [Object],
        isCreditCard: [Object],
        isIdentityCard: [Object],
        isISIN: [Object],
        isISBN: [Object],
        isISSN: [Object],
        isMobilePhone: [Function: isMobilePhone],
        isMobilePhoneLocales: [Array],
        isPostalCode: [Function: _default],
        isPostalCodeLocales: [Array],
        isCurrency: [Object],
        isISO8601: [Object],
        isRFC3339: [Object],
        isISO31661Alpha2: [Object],
        isISO31661Alpha3: [Object],
        isBase64: [Object],
        isDataURI: [Object],
        isMagnetURI: [Object],
        isMimeType: [Object],
        isLatLong: [Object],
        ltrim: [Object],
        rtrim: [Object],
        trim: [Object],
        escape: [Object],
        unescape: [Object],
        stripLow: [Object],
        whitelist: [Object],
        blacklist: [Object],
        isWhitelisted: [Object],
        normalizeEmail: [Object],
        toString: [Object],
        default: [Circular],
        isImmutable: [Function],
        notNull: [Function],
        extend: [Function: extend],
        notEmpty: [Function: notEmpty],
        len: [Function: len],
        isUrl: [Function: isUrl],
        isIPv6: [Function: isIPv6],
        isIPv4: [Function: isIPv4],
        notIn: [Function: notIn],
        regex: [Function: regex],
        notRegex: [Function: notRegex],
        min: [Function: min],
        max: [Function: max],
        not: [Function: not],
        notContains: [Function: notContains],
        is: [Function: is],
        isNull: [Object],
        isDate: [Function] },
     Model: Model,
     DataTypes: 
      { ABSTRACT: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        NUMBER: [Object],
        TINYINT: [Object],
        SMALLINT: [Object],
        MEDIUMINT: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        FLOAT: [Object],
        TIME: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        BOOLEAN: [Object],
        NOW: [Object],
        BLOB: [Object],
        DECIMAL: [Object],
        NUMERIC: [Object],
        UUID: [Object],
        UUIDV1: [Object],
        UUIDV4: [Object],
        HSTORE: [Object],
        JSON: [Object],
        JSONB: [Object],
        VIRTUAL: [Object],
        ARRAY: [Object],
        NONE: [Object],
        ENUM: [Object],
        RANGE: [Object],
        REAL: [Object],
        DOUBLE: [Object],
        'DOUBLE PRECISION': [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        CIDR: [Object],
        INET: [Object],
        MACADDR: [Object],
        postgres: [Object],
        mysql: [Object],
        sqlite: [Object],
        mssql: [Object] },
     ABSTRACT: { [Function: ABSTRACT] warn: [Function: warn], types: {} },
     STRING: 
      { [Function: STRING]
        super_: [Object],
        warn: [Function: warn],
        key: 'STRING',
        types: [Object] },
     CHAR: 
      { [Function: CHAR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CHAR',
        types: [Object] },
     TEXT: 
      { [Function: TEXT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TEXT',
        types: [Object] },
     NUMBER: 
      { [Function: NUMBER]
        super_: [Object],
        warn: [Function: warn],
        key: 'NUMBER',
        types: {} },
     TINYINT: 
      { [Function: TINYINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'TINYINT',
        types: [Object] },
     SMALLINT: 
      { [Function: SMALLINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'SMALLINT',
        types: [Object] },
     MEDIUMINT: 
      { [Function: MEDIUMINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'MEDIUMINT',
        types: [Object] },
     INTEGER: 
      { [Function: INTEGER]
        super_: [Object],
        warn: [Function: warn],
        key: 'INTEGER',
        types: [Object] },
     BIGINT: 
      { [Function: BIGINT]
        super_: [Object],
        warn: [Function: warn],
        key: 'BIGINT',
        types: [Object] },
     FLOAT: 
      { [Function: FLOAT]
        super_: [Object],
        warn: [Function: warn],
        key: 'FLOAT',
        types: [Object] },
     TIME: 
      { [Function: TIME]
        super_: [Object],
        warn: [Function: warn],
        key: 'TIME',
        types: [Object] },
     DATE: 
      { [Function: DATE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DATE',
        types: [Object] },
     DATEONLY: { [Function: DATEONLY] super_: [Object], key: 'DATEONLY', types: [Object] },
     BOOLEAN: 
      { [Function: BOOLEAN]
        super_: [Object],
        warn: [Function: warn],
        key: 'BOOLEAN',
        parse: [Function: _sanitize],
        types: [Object] },
     NOW: 
      { [Function: NOW]
        super_: [Object],
        warn: [Function: warn],
        key: 'NOW',
        types: {} },
     BLOB: 
      { [Function: BLOB]
        super_: [Object],
        warn: [Function: warn],
        key: 'BLOB',
        types: [Object] },
     DECIMAL: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     NUMERIC: 
      { [Function: DECIMAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'DECIMAL',
        types: [Object] },
     UUID: 
      { [Function: UUID]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUID',
        types: [Object] },
     UUIDV1: 
      { [Function: UUIDV1]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV1',
        types: {} },
     UUIDV4: 
      { [Function: UUIDV4]
        super_: [Object],
        warn: [Function: warn],
        key: 'UUIDV4',
        types: {} },
     HSTORE: 
      { [Function: HSTORE]
        super_: [Object],
        warn: [Function: warn],
        key: 'HSTORE',
        types: [Object] },
     JSON: 
      { [Function: JSONTYPE]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSON',
        types: [Object] },
     JSONB: 
      { [Function: JSONB]
        super_: [Object],
        warn: [Function: warn],
        key: 'JSONB',
        types: [Object] },
     VIRTUAL: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ARRAY: 
      { [Function: ARRAY]
        super_: [Object],
        warn: [Function: warn],
        key: 'ARRAY',
        is: [Function: is],
        types: {} },
     NONE: 
      { [Function: VIRTUAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'VIRTUAL',
        types: {} },
     ENUM: 
      { [Function: ENUM]
        super_: [Object],
        warn: [Function: warn],
        key: 'ENUM',
        types: [Object] },
     RANGE: 
      { [Function: RANGE]
        super_: [Object],
        warn: [Function: warn],
        key: 'RANGE',
        types: [Object] },
     REAL: 
      { [Function: REAL]
        super_: [Object],
        warn: [Function: warn],
        key: 'REAL',
        types: [Object] },
     DOUBLE: 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     'DOUBLE PRECISION': 
      { [Function: DOUBLE]
        super_: [Object],
        warn: [Function: warn],
        key: 'DOUBLE PRECISION',
        types: [Object] },
     GEOMETRY: 
      { [Function: GEOMETRY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOMETRY',
        types: [Object] },
     GEOGRAPHY: 
      { [Function: GEOGRAPHY]
        super_: [Object],
        warn: [Function: warn],
        key: 'GEOGRAPHY',
        types: [Object] },
     CIDR: 
      { [Function: CIDR]
        super_: [Object],
        warn: [Function: warn],
        key: 'CIDR',
        types: [Object] },
     INET: 
      { [Function: INET]
        super_: [Object],
        warn: [Function: warn],
        key: 'INET',
        types: [Object] },
     MACADDR: 
      { [Function: MACADDR]
        super_: [Object],
        warn: [Function: warn],
        key: 'MACADDR',
        types: [Object] },
     postgres: 
      { DECIMAL: [Object],
        BLOB: [Object],
        STRING: [Object],
        CHAR: [Object],
        TEXT: [Object],
        SMALLINT: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        BOOLEAN: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        FLOAT: [Object],
        GEOMETRY: [Object],
        GEOGRAPHY: [Object],
        HSTORE: [Object],
        RANGE: [Object],
        ENUM: [Object] },
     mysql: 
      { ENUM: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        UUID: [Object],
        GEOMETRY: [Object],
        DECIMAL: [Object],
        BLOB: [Object],
        JSON: [Object] },
     sqlite: 
      { DATE: [Object],
        DATEONLY: [Object],
        STRING: [Object],
        CHAR: [Object],
        NUMBER: [Object],
        FLOAT: [Object],
        REAL: [Object],
        'DOUBLE PRECISION': [Object],
        TINYINT: [Object],
        SMALLINT: [Object],
        MEDIUMINT: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        TEXT: [Object],
        ENUM: [Object],
        JSON: [Object] },
     mssql: 
      { BLOB: [Object],
        BOOLEAN: [Object],
        ENUM: [Object],
        STRING: [Object],
        UUID: [Object],
        DATE: [Object],
        DATEONLY: [Object],
        NOW: [Object],
        TINYINT: [Object],
        SMALLINT: [Object],
        INTEGER: [Object],
        BIGINT: [Object],
        REAL: [Object],
        FLOAT: [Object],
        TEXT: [Object] },
     Transaction: { [Function: Transaction] Transaction: [Circular], default: [Circular] },
     Deferrable: 
      { INITIALLY_DEFERRED: [Object],
        INITIALLY_IMMEDIATE: [Object],
        NOT: [Object],
        SET_DEFERRED: [Object],
        SET_IMMEDIATE: [Object] },
     Association: 
      { [Function: Association]
        BelongsTo: [Object],
        HasOne: [Function: HasOne],
        HasMany: [Object],
        BelongsToMany: [Object],
        default: [Circular],
        Association: [Circular] },
     useInflection: [Function: useInflection],
     _setupHooks: [Function: _setupHooks],
     runHooks: [Function: runHooks],
     hook: [Function: hook],
     addHook: [Function: addHook],
     removeHook: [Function: removeHook],
     hasHook: [Function: hasHook],
     hasHooks: [Function: hasHook],
     beforeValidate: [Function],
     afterValidate: [Function],
     validationFailed: [Function],
     beforeCreate: [Function],
     afterCreate: [Function],
     beforeDestroy: [Function],
     afterDestroy: [Function],
     beforeRestore: [Function],
     afterRestore: [Function],
     beforeUpdate: [Function],
     afterUpdate: [Function],
     beforeSave: [Function],
     afterSave: [Function],
     beforeUpsert: [Function],
     afterUpsert: [Function],
     beforeBulkCreate: [Function],
     afterBulkCreate: [Function],
     beforeBulkDestroy: [Function],
     afterBulkDestroy: [Function],
     beforeBulkRestore: [Function],
     afterBulkRestore: [Function],
     beforeBulkUpdate: [Function],
     afterBulkUpdate: [Function],
     beforeFind: [Function],
     beforeFindAfterExpandIncludeAll: [Function],
     beforeFindAfterOptions: [Function],
     afterFind: [Function],
     beforeCount: [Function],
     beforeDefine: [Function],
     afterDefine: [Function],
     beforeInit: [Function],
     afterInit: [Function],
     beforeConnect: [Function],
     afterConnect: [Function],
     beforeSync: [Function],
     afterSync: [Function],
     beforeBulkSync: [Function],
     afterBulkSync: [Function],
     beforeDelete: [Function],
     afterDelete: [Function],
     beforeBulkDelete: [Function],
     afterBulkDelete: [Function],
     beforeConnection: [Function],
     Error: [Function: BaseError],
     SequelizeScopeError: [Function: SequelizeScopeError],
     ValidationError: [Function: ValidationError],
     OptimisticLockError: [Function: OptimisticLockError],
     DatabaseError: [Function: DatabaseError],
     TimeoutError: [Function: TimeoutError],
     UniqueConstraintError: [Function: UniqueConstraintError],
     ForeignKeyConstraintError: [Function: ForeignKeyConstraintError],
     ExclusionConstraintError: [Function: ExclusionConstraintError],
     UnknownConstraintError: [Function: UnknownConstraintError],
     ValidationErrorItem: { [Function: ValidationErrorItem] Origins: [Object], TypeStringMap: [Object] },
     ConnectionError: [Function: ConnectionError],
     ConnectionRefusedError: [Function: ConnectionRefusedError],
     AccessDeniedError: [Function: AccessDeniedError],
     HostNotFoundError: [Function: HostNotFoundError],
     HostNotReachableError: [Function: HostNotReachableError],
     InvalidConnectionError: [Function: InvalidConnectionError],
     ConnectionTimedOutError: [Function: ConnectionTimedOutError],
     InstanceError: [Function: InstanceError],
     EmptyResultError: [Function: EmptyResultError],
     EagerLoadingError: [Function: EagerLoadingError],
     AssociationError: [Function: AssociationError],
     QueryError: [Function: QueryError],
     BulkRecordError: [Function: BulkRecordError],
     Sequelize: [Circular],
     default: [Circular] } }
connecting by db url undefined
Executing (default): CREATE TABLE IF NOT EXISTS "Planets" ("id"   SERIAL , "name" VARCHAR(255) NOT NULL, "climate" VARCHAR(255), "diameter" VARCHAR(255), "films" VARCHAR(255)[], "gravity" VARCHAR(255), "orbital_period" VARCHAR(255), "population" VARCHAR(255), "residents" VARCHAR(255)[], "rotation_period" VARCHAR(255), "surface_water" VARCHAR(255), "terrain" VARCHAR(255), "url" VARCHAR(255), "comment" VARCHAR(255), "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Planets' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "Universals" ("id"   SERIAL , "name" VARCHAR(255) NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Universals' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "Users" ("id"   SERIAL , "username" VARCHAR(255) NOT NULL, "secret" VARCHAR(255) NOT NULL, "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Users' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Executing (default): CREATE TABLE IF NOT EXISTS "Tsa_aeronaves" ("id"   SERIAL , "_id" VARCHAR(255), "cod_aeronave" VARCHAR(255), "cod_matricula" VARCHAR(255), "horas_vuelo" VARCHAR(255), "id_tipo_aeronave" VARCHAR(255), "id_asignacion_aerea" VARCHAR(255), "createdAt" TIMESTAMP WITH TIME ZONE NOT NULL, "updatedAt" TIMESTAMP WITH TIME ZONE NOT NULL, PRIMARY KEY ("id"));
Executing (default): SELECT i.relname AS name, ix.indisprimary AS primary, ix.indisunique AS unique, ix.indkey AS indkey, array_agg(a.attnum) as column_indexes, array_agg(a.attname) AS column_names, pg_get_indexdef(ix.indexrelid) AS definition FROM pg_class t, pg_class i, pg_index ix, pg_attribute a WHERE t.oid = ix.indrelid AND i.oid = ix.indexrelid AND a.attrelid = t.oid AND t.relkind = 'r' and t.relname = 'Tsa_aeronaves' GROUP BY i.relname, ix.indexrelid, ix.indisprimary, ix.indisunique, ix.indkey ORDER BY i.relname;
Express server listening on port 3001 in development mode
Executing (default): SELECT "id", "username", "secret", "createdAt", "updatedAt" FROM "Users" AS "User" ORDER BY "User"."id" ASC LIMIT 10 OFFSET 0;
[0mGET /api/v1/tsa_aeronaves [32m200[0m 201.515 ms - 145[0m
Executing (default): SELECT "id", "username", "secret", "createdAt", "updatedAt" FROM "Users" AS "User" ORDER BY "User"."id" ASC LIMIT 10 OFFSET 0;
[0mGET /api/v1/tsa_aeronaves [32m200[0m 27.890 ms - 145[0m
